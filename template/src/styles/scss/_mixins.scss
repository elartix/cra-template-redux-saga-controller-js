// @include box-shadow(#{"inset 5px 5px 5px rgba(255, 255, 255, 0.9)"});
@mixin box-shadow-alt($props) {
  -webkit-box-shadow: $props;
  -moz-box-shadow:    $props;
  box-shadow:         $props;
}
// @include rect-size(35px);
@mixin rect-size($size) {
  flex-basis: $size;
  min-width: $size;
  height: $size;
  width: $size;
}
// @include transition( padding-top 0.5s ease );
@mixin transition-alt ($transition) {
    -webkit-transition: $transition;
    -moz-transition:    $transition;
    -o-transition:      $transition;
    transition:         $transition;
}
// @include user-selection( none );
@mixin user-selection ( $select ) {
    -webkit-touch-callout:  $select;
    -webkit-user-select:    $select;
    -moz-user-select:       $select;
    -ms-user-select:        $select;
    user-select:            $select;
}

@mixin transform ($transforms) {
    -webkit-transform:  $transforms;
    -moz-transform:     $transforms;
    -o-transform:       $transforms;
    -ms-transform:      $transforms;
    transform:          $transforms;
}
@mixin rotate ($deg) {
  @include transform(rotate(#{$deg}deg));
}
@mixin scale ($scale) {
  @include transform(scale($scale));
}
@mixin translate ($x, $y) {
  @include transform(translate($x, $y));
}
@mixin skew ($x, $y) {
    @include transform(skew(#{$x}deg, #{$y}deg));
}
@mixin transform-origin ($origin) {
    -webkit-transform-origin:   $origin;
    -ms-transform-origin:       $origin;
    -o-transform-origin:        $origin;
    transform-origin:           $origin;
}
@mixin animation-delay ($delay) {
    -webkit-animation-delay:    $delay;
    -moz-animation-delay:       $delay;
    -o-animation-delay:         $delay;
    animation-delay:            $delay;
}
@mixin animation ($name, $duration, $delay, $ease) {
    -webkit-animation: $name $duration $delay $ease;
    -moz-animation:    $name $duration $delay $ease;
    animation:         $name $duration $delay $ease;
}
@mixin animation-simple ($animation) {
  -webkit-animation: $animation;
  -moz-animation:    $animation;
  animation:         $animation;
}
@mixin animation-ease ($name, $duration, $delay) {
    @include animation($name, $duration, $delay, ease);
}
@mixin keyframes ($name) {
  @-webkit-keyframes #{$name} {
    @content;
  }
  @-moz-keyframes #{$name} {
    @content;
  }
  @-ms-keyframes #{$name} {
    @content;
  }
  @keyframes #{$name} {
    @content;
  }
}

@function rem-separator($list, $separator: false) {
  @if $separator == "comma" or $separator == "space" {
    @return append($list, null, $separator);
  }

  @if function-exists("list-separator") == true {
    @return list-separator($list);
  }

  // list-separator polyfill by Hugo Giraudel (https://sass-compatibility.github.io/#list_separator_function)
  $test-list: ();
  @each $item in $list {
    $test-list: append($test-list, $item, space);
  }

  @return if($test-list == $list, space, comma);
}

@mixin rem-baseline($zoom: 100%) {
  font-size: $zoom / 16px * $rem-baseline;
}

@function rem-convert($to, $values...) {
  $result: ();
  $separator: rem-separator($values);

  @each $value in $values {
    @if type-of($value) == "number" and unit($value) == "rem" and $to == "px" {
      $result: append($result, $value / 1rem * $rem-baseline, $separator);
    } @else if type-of($value) == "number" and unit($value) == "px" and $to == "rem" {
      $result: append($result, $value / $rem-baseline * 1rem, $separator);
    } @else if type-of($value) == "list" {
      $value-separator: rem-separator($value);
      $value: rem-convert($to, $value...);
      $value: rem-separator($value, $value-separator);
      $result: append($result, $value, $separator);
    } @else {
      $result: append($result, $value, $separator);
    }
  }

  @return if(length($result) == 1, nth($result, 1), $result);
}

@function rem($values...) {
  @if $rem-px-only {
    @return rem-convert(px, $values...);
  } @else {
    @return rem-convert(rem, $values...);
  }
}

@mixin rem($properties, $values...) {
  @if type-of($properties) == "map" {
    @each $property in map-keys($properties) {
      @include rem($property, map-get($properties, $property));
    }
  } @else {
    @each $property in $properties {
      @if $rem-fallback or $rem-px-only {
        #{$property}: rem-convert(px, $values...);
      }
      @if not $rem-px-only {
        #{$property}: rem-convert(rem, $values...);
      }
    }
  }
}

// NOTE general styles to add scrollbar
@mixin scrollbar ($height, $bgColor) {
  height: $height;
  overflow-y: auto;
  overflow-x: hidden;
  background-color: $bgColor;
}


@mixin backdrop-filter-blur ($value) {
  -webkit-backdrop-filter: blur($value);
  backdrop-filter: blur($value);
}

@mixin viewport-height ($vhHeight: 100) {
  height: #{$vhHeight}vh !important;  /* Fallback for browsers that do not support Custom Properties */
  height: calc(var(--vh, 1vh) * #{$vhHeight}) !important;
}
